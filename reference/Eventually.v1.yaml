openapi: 3.0.0
info:
  title: eventually v2
  version: '2.0'
  description: 'eventually: an api wraps the blaseball feed into a searchable index'
  contact:
    name: Allie Signet M.
    url: 'https://github.com/alisww/eventually'
    email: allie@sibr.dev
  license:
    name: AGPLv3
servers:
  - url: 'https://api.sibr.dev/eventually/v2'
    description: '@ SIBR'
paths:
  /events:
    get:
      summary: /events
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
              examples: {}
      operationId: events
      parameters:
        - schema:
            type: boolean
          in: query
          name:  expand_children
          description: expand event's children ids into full events
        - schema:
            type: boolean
          in: query
          name:  expand_parent
          description: expand expand event's parent id into full event
        - schema:
            type: string
          in: query
          name: sortby
          description: element to which to sort by. uses postgres' array path syntax, so object.metadata.being is expressed as '{metadata,being}'.
        - schema:
            type: string
            enum:
              - asc
              - desc
          in: query
          name: sortorder
          description: Order to sort by. defaults to desc
        - schema:
            type: string
          in: query
          name: id
          description: Filter by event UUIDs
        - schema:
            type: string
            example: 1f159bab-923a-4811-b6fa-02bfde50925a_and_d35ccee1-9559-49a1-aaa4-7809f7b5c46e
          in: query
          name: playerTags
          description: Filter by player UUIDs
        - schema:
            type: string
          in: query
          name: teamTags
          description: Filter by team UUIDs
        - schema:
            type: string
          in: query
          name: gameTags
          description: Filter by game UUIDs
        - schema:
            type: string
          in: query
          name: type
          description: Filter by event types
        - schema:
            oneOf:
              - type: string
              - type: integer
          in: query
          name: before
          description: 'Filter to events before [UNIX timestamp or ISO 8601 UTC date-time string]'
        - schema:
            oneOf:
              - type: string
              - type: integer
          in: query
          name: after
          description: 'Filter to events after [UNIX timestamp or ISO 8601 UTC date-time string]'
        - schema:
            type: integer
          in: query
          name: phase
          description: Filter to specific phase
        - schema:
            type: integer
          in: query
          name: phase_min
          description: Filter to events from phase > phase_min
        - schema:
            type: integer
          in: query
          name: phase_max
          description: Filter to events from phase < phase_max
        - schema:
            type: integer
          in: query
          name: day
          description: Filter to specific day
        - schema:
            type: integer
          in: query
          name: day_min
          description: Filter to events from day > day_min
        - schema:
            type: integer
          in: query
          name: day_max
          description: Filter to events from day < day_max
        - schema:
            type: string
          in: query
          name: 'metadata.[field]'
          description: 'Filter by value of metadata field '
        - schema:
            type: string
          in: query
          name: 'metadata.[field].[subfield]'
          description: Filter by value of a metadata field's subfield; so on
        - schema:
            type: integer
          in: query
          name: offset
          description: 'Offsets results; so if you got 100 and want 100 more, set this to 100, etc (paging, basically)'
        - schema:
            type: integer
          in: query
          name: limit
          description: How many events to fetch
        - schema:
            type: string
          in: query
          name: description
          description: Filter by events that contain an exact phrase
        - schema:
            type: string
          in: query
          name: description~
          description: 'Query the description of the event using google-like syntax. (supports -, quoting, and ''or'') '
        - schema:
            type: integer
          in: query
          name: season
          description: Filter to specific season
        - schema:
            type: integer
          in: query
          name: season_min
          description: Events with season > season_min
        - schema:
            type: integer
          in: query
          name: season_max
          description: Events with season < season_min
        - schema:
            type: integer
          in: query
          name: scales_min
          description: Events with upscales > scales_min
        - schema:
            type: integer
          in: query
          name: scales_max
          description: Events with upscales < scales_max
      description: |
        gets events from the index

        **note: you can specify multiple values for tag fields ('playerTags', 'teamTags', 'gameTags', 'type', 'category', 'metadata')**
        for example; "A\_or\_B"; "A\_and\_B"; "A\_and\_B\_or\_C")
components:
  schemas:
    Event:
      description: 'metadata has a *ton* of possible fields; a sort-of-spec of them can be found [here](https://gist.github.com/alisww/36df4b261c0aa657b88fad56343b3cfa)'
      type: object
      title: a feed event
      properties:
        id:
          type: string
          minLength: 1
        playerTags:
          type: array
          items:
            type: string
        teamTags:
          type: array
          items:
            type: string
        gameTags:
          type: array
          items:
            type: string
        season:
          type: integer
        tournament:
          type: integer
        day:
          type: integer
        phase:
          type: integer
        category:
          type: integer
        description:
          type: string
          minLength: 1
        nuts:
          type: integer
        created:
          type: string
          minLength: 1
        type:
          type: string
          minLength: 1
        metadata:
          type: object
      required:
        - id
        - playerTags
        - teamTags
        - gameTags
        - season
        - tournament
        - day
        - phase
        - category
        - description
        - nuts
        - created
        - type
        - metadata
  examples: {}
